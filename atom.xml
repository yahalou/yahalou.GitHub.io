<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yahalou.github.io</id>
    <title>long&apos;s blog</title>
    <updated>2022-06-21T02:42:46.460Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yahalou.github.io"/>
    <link rel="self" href="https://yahalou.github.io/atom.xml"/>
    <subtitle>吾生也有涯，而知也无涯</subtitle>
    <logo>https://yahalou.github.io/images/avatar.png</logo>
    <icon>https://yahalou.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, long&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[形式语言与自动机]]></title>
        <id>https://yahalou.github.io/post/xing-shi-yu-yan-yu-zi-dong-ji/</id>
        <link href="https://yahalou.github.io/post/xing-shi-yu-yan-yu-zi-dong-ji/">
        </link>
        <updated>2022-06-21T02:41:51.000Z</updated>
        <content type="html"><![CDATA[<h1 id="文法">文法</h1>
<figure data-type="image" tabindex="1"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206211041330.jpg" alt="形式语言笔记_页面_01" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206211041332.jpg" alt="形式语言笔记_页面_02" loading="lazy"></figure>
<h1 id="dfanfa正则表达式">DFA，NFA，正则表达式</h1>
<figure data-type="image" tabindex="3"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206211041333.jpg" alt="形式语言笔记_页面_03" loading="lazy"></figure>
<figure data-type="image" tabindex="4"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206211041334.jpg" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="5"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206211041335.jpg" alt="形式语言笔记_页面_05" loading="lazy"></figure>
<figure data-type="image" tabindex="6"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206211041336.jpg" alt="形式语言笔记_页面_06" loading="lazy"></figure>
<h1 id="cnfpda">CNF，PDA</h1>
<figure data-type="image" tabindex="7"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206211041337.jpg" alt="形式语言笔记_页面_07" loading="lazy"></figure>
<figure data-type="image" tabindex="8"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206211041338.jpg" alt="形式语言笔记_页面_08" loading="lazy"></figure>
<figure data-type="image" tabindex="9"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206211041339.jpg" alt="形式语言笔记_页面_09" loading="lazy"></figure>
<figure data-type="image" tabindex="10"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206211041340.jpg" alt="形式语言笔记_页面_10" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[第三章 存储系统]]></title>
        <id>https://yahalou.github.io/post/di-san-zhang-cun-chu-xi-tong/</id>
        <link href="https://yahalou.github.io/post/di-san-zhang-cun-chu-xi-tong/">
        </link>
        <updated>2022-06-19T16:08:01.000Z</updated>
        <content type="html"><![CDATA[<h1 id="存储器的层次结构">存储器的层次结构</h1>
<img src="C:/Users/26033/AppData/Roaming/Typora/typora-user-images/image-20220619171315343.png" alt="image-20220619171315343" style="zoom:200%;" />
<p>存取周期=存取时间+恢复时间<img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206191722268.png" alt="B1A6FF06DCC8CC4FB410807205367808" loading="lazy"></p>
<h1 id="半导体随机存储器ram">半导体随机存储器（RAM）</h1>
<p>主存用DRAM，cache用SRAM</p>
<p><strong>DRAM</strong>一般2ms要<strong>刷新</strong>一次，因为DRAM上的电荷只能维持1~2ms，只有DRAM要刷新</p>
<p><strong>地址分为行列地址</strong>，算地址线的时候要除2</p>
<p>地址线计算：地址线+数据线+片选线+读写控制线（可以是同一根）</p>
<p>DRAM一般<strong>按行刷新</strong></p>
<figure data-type="image" tabindex="1"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206191727180.png" alt="image-20220619172747303" loading="lazy"></figure>
<h1 id="只读存储器rom">只读存储器（ROM）</h1>
<figure data-type="image" tabindex="2"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206191728198.png" alt="image-20220619172843031" loading="lazy"></figure>
<p><strong>闪存</strong>要先擦除再写入，所以<strong>写速度 &lt; 读速度</strong></p>
<h1 id="主存与cpu的连接">主存与CPU的连接</h1>
<h2 id="主存容量的扩展">主存容量的扩展</h2>
<p>位扩展：并联</p>
<p>字扩展：串联<img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206191838811.png" alt="208E27E903D000E94F3E25ACF8CEE2BA" loading="lazy"></p>
<h1 id="多模块存储器">多模块存储器</h1>
<h2 id="单体多字系统">单体多字系统</h2>
<h2 id="多体并行储存器">多体并行储存器</h2>
<h2 id="目的">目的</h2>
<p>一个存储器有一个存取周期，在一个存储器内顺序存取很浪费时间</p>
<h4 id="高位交叉编址">高位交叉编址</h4>
<figure data-type="image" tabindex="3"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206191912507.png" alt="697E3CE38C5C8B5027195EF5E85A9B6E" loading="lazy"></figure>
<p>本质上还是顺序存储器，不能并行访问</p>
<h4 id="低位交叉编址">低位交叉编址</h4>
<figure data-type="image" tabindex="4"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206191912994.png" alt="4495B43E60373C3FCB391460BDF0227B" loading="lazy"></figure>
<figure data-type="image" tabindex="5"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206191920681.png" alt="81845D93ED6BC26436F420FBC7AE05BE" loading="lazy"></figure>
<h1 id="cache">Cache</h1>
<h2 id="工作原理">工作原理</h2>
<p>时间局部性：一旦一条指令执行，它就可能在不久的将来再被执行</p>
<p>空间局部性：一旦一个存储单元被访问，它附近的存储单元也很快被访问</p>
<p>Cache将主存分组，符合空间局部性</p>
<p>写回法写命中（对Cache写命中时修改Cache的内容），符合空间局部性</p>
<p><strong>提升效率</strong></p>
<figure data-type="image" tabindex="6"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206191944145.png" alt="78E213B58D8A3F4CDE234853CA10E623" loading="lazy"></figure>
<h2 id="cache和主存的映射关系">Cache和主存的映射关系</h2>
<ul>
<li>将主存地址分成多个字段</li>
</ul>
<ul>
<li>
<p>每个<strong>Cache行（块）<strong>大小和</strong>主存块</strong>相等</p>
</li>
<li>
<p>Cache和主存之间以<strong>块</strong>为单位交换数据</p>
</li>
<li>
<p>不命中<strong>先送到对应Cache中</strong>，再送到CPU中</p>
</li>
</ul>
<h3 id="全相联映射">全相联映射</h3>
<figure data-type="image" tabindex="7"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206192253448.png" alt="image-20220619225319140" loading="lazy"></figure>
<p>前22位为主存块号，主存中处于同一块的地址主存块号相同</p>
<h3 id="直接映射">直接映射</h3>
<figure data-type="image" tabindex="8"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206192257586.png" alt="image-20220619225729512" loading="lazy"></figure>
<p>这里主存块号%Cache总块数余了三位，就是行号，可以快速定位</p>
<p>标记位变为19位，行号提前匹配了</p>
<p><strong>行号不算在Cache的存储容量里</strong></p>
<h3 id="组相联映射">组相联映射</h3>
<figure data-type="image" tabindex="9"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206192305199.png" alt="image-20220619230510247" loading="lazy"></figure>
<h2 id="cache替换算法">Cache替换算法</h2>
<p>直接映射无需考虑，全相联或组相联需要考虑</p>
<h3 id="lru-近期最少使用算法">LRU 近期最少使用算法</h3>
<figure data-type="image" tabindex="10"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206192323824.png" alt="5A422F723C5ADE60380CC620D07B6ED8" loading="lazy"></figure>
<h1 id="虚拟存储器">虚拟存储器</h1>
<p>跳了</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[第二章 数据的表示和运算]]></title>
        <id>https://yahalou.github.io/post/di-er-zhang-shu-ju-de-biao-shi-he-yun-suan/</id>
        <link href="https://yahalou.github.io/post/di-er-zhang-shu-ju-de-biao-shi-he-yun-suan/">
        </link>
        <updated>2022-06-19T08:20:40.000Z</updated>
        <content type="html"><![CDATA[<h1 id="数制与编码">数制与编码</h1>
<h2 id="十进制转换为任意进制">十进制转换为任意进制</h2>
<figure data-type="image" tabindex="1"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206191004723.png" alt="554DCF43991E684845EF094B25C15F76" loading="lazy"></figure>
<h2 id="汉明码">汉明码</h2>
<p>偶校验码</p>
<figure data-type="image" tabindex="2"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206191019456.png" alt="image-20220619101946912" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206191021842.png" alt="image-20220619102142960" loading="lazy"></figure>
<figure data-type="image" tabindex="4"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206191022727.png" alt="image-20220619102241665" loading="lazy"></figure>
<figure data-type="image" tabindex="5"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206191023511.png" alt="image-20220619102339773" loading="lazy"></figure>
<p>最开头的bit的作用</p>
<figure data-type="image" tabindex="6"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206191034644.png" alt="image-20220619103426389" loading="lazy"></figure>
<p>例：画表格也可以，注意由低到高顺序 <img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206191101945.png" alt="97533D1A363E1A3429B3CB97408A4C41" loading="lazy"></p>
<h1 id="定点数">定点数</h1>
<h2 id="表示">表示</h2>
<h3 id="定点小数">定点小数</h3>
<figure data-type="image" tabindex="7"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206191109915.png" alt="image-20220619110951862" loading="lazy"></figure>
<h3 id="定点整数">定点整数</h3>
<figure data-type="image" tabindex="8"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206191110032.png" alt="image-20220619111004101" loading="lazy"></figure>
<h3 id="原码">原码</h3>
<p>符号位+绝对值</p>
<figure data-type="image" tabindex="9"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206191112358.png" alt="image-20220619111221511" loading="lazy"></figure>
<figure data-type="image" tabindex="10"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206191112388.png" alt="image-20220619111233909" loading="lazy"></figure>
<h3 id="补码反码">补码，反码</h3>
<figure data-type="image" tabindex="11"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206191119235.png" alt="E959C3F798B9C64BA4CAE91E44EAC102" loading="lazy"></figure>
<p>转换最常用的是<strong>数值位取反加1</strong></p>
<h3 id="移码">移码</h3>
<p>见IEEE 754</p>
<h2 id="计算">计算</h2>
<h3 id="移位计算">移位计算</h3>
<figure data-type="image" tabindex="12"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206191128769.png" alt="image-20220619112803831" loading="lazy"></figure>
<h3 id="原码加减法">原码加减法</h3>
<p><strong>当左边位出现溢出时，将溢出位丢掉</strong></p>
<figure data-type="image" tabindex="13"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206191132078.png" alt="image-20220619113216287" loading="lazy"></figure>
<h3 id="补码加减法">补码加减法</h3>
<p>做加法，两数的补码直接相加</p>
<p>做减法，将被减数与减数的<strong>机器负数</strong>（符号位取反，数值位取反+1）相加</p>
<p>减法运算在机器中是用<strong>加法器</strong>实现的</p>
<figure data-type="image" tabindex="14"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206191134674.png" alt="image-20220619113421627" loading="lazy"></figure>
<h3 id="溢出判别">溢出判别</h3>
<figure data-type="image" tabindex="15"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206191138335.png" alt="image-20220619113837482" loading="lazy"></figure>
<p>变形补码（双符号位）负数符号位变为11，正数为00，相加后判断</p>
<h3 id="乘法运算">乘法运算</h3>
<h4 id="原码一位乘法间接补码">原码一位乘法（间接补码）</h4>
<figure data-type="image" tabindex="16"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206191228417.png" alt="7E57F410854DFE82DF9B589E985A4BFC" loading="lazy"></figure>
<h3 id="除法运算">除法运算</h3>
<h4 id="原码除法运算不恢复余数法">原码除法运算（不恢复余数法）</h4>
<figure data-type="image" tabindex="17"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206191239717.png" alt="C4D0B84354FCDE6C4555FA82251054F6" loading="lazy"></figure>
<p>原理：先从被除数减去除数，看看能不能商1，不能就商0，加回去</p>
<h3 id="强制类型转换">强制类型转换</h3>
<p>c语言的数据在内存中为补码形式</p>
<p>将所给数字写为二进制，然后按照转换成不同的码的规则进行读出</p>
<h2 id="数据存储">数据存储</h2>
<h3 id="大端小端">大端小端</h3>
<p>大端小端不同数据的顺序不变，变得是每个数据内部的存储顺序</p>
<figure data-type="image" tabindex="18"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206191305751.png" alt="F6C761DC02B13EBB0BEC87C4E67DFD98" loading="lazy"></figure>
<h3 id="边界对齐">边界对齐</h3>
<p>半字地址一定是 2 的整数倍，字地址一定是 4 的整数倍</p>
<h1 id="浮点数">浮点数</h1>
<h2 id="表示-2">表示</h2>
<p>阶码：<strong>定点整数</strong></p>
<p>尾数：<strong>定点小数</strong></p>
<figure data-type="image" tabindex="19"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206191350281.png" alt="ABA0D65CA9F55261F981800CBAE92162" loading="lazy"></figure>
<h2 id="浮点数规范化">浮点数规范化</h2>
<p>尾数的最高数值必须是一个有效值，通过调整阶码实现规范化</p>
<h2 id="ieee-754标准">IEEE 754标准</h2>
<h3 id="转换">转换</h3>
<p>阶码用<strong>移码</strong>表示</p>
<p>移码=真值+偏置值</p>
<p>尾数用<strong>原码</strong>表示</p>
<p>默认最高位为1，免去规格化，所以尾数部分为 <strong>1.M</strong></p>
<figure data-type="image" tabindex="20"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206191416708.png" alt="image-20220619141641715" loading="lazy"></figure>
<figure data-type="image" tabindex="21"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206191424092.png" alt="1319835082B48CF397F37F3CC34667DB" loading="lazy"></figure>
<h3 id="范围">范围</h3>
<p>阶码 E 全 0 ，尾数M不全为0，表示非规格化小数</p>
<figure data-type="image" tabindex="22"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206191438281.png" alt="9BC91E92E1BF48CD788A403057D97AF5" loading="lazy"></figure>
<figure data-type="image" tabindex="23"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206191441781.png" alt="image-20220619144105833" loading="lazy"></figure>
<h2 id="计算-2">计算</h2>
<h3 id="加减运算">加减运算</h3>
<figure data-type="image" tabindex="24"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206191448111.png" alt="image-20220619144808454" loading="lazy"></figure>
<figure data-type="image" tabindex="25"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206191508027.png" alt="image-20220619150818281" loading="lazy"></figure>
<h3 id="强制类型转换-2">强制类型转换</h3>
<p>从 int 转为 float 可能发生精度损失和溢出</p>
<p>从 float 转为 int 可能会发生数据舍入</p>
<h3 id="日常写代码的帮助">日常写代码的帮助</h3>
<pre><code class="language-c">计算2.0F-1.3F
1.3F 规范化表示：	1.01001100110011001100110 * 2 ^ 0
2.0F 规范化表示：	1.00000000000000000000000 * 2 ^ 1
    
首先对阶 1.3F变为 0.10100110011001100110011 * 2 ^ 1
2.0F-1.3F =  	0.01011001100110011001101 * 2 ^ 1
规范化表示：		1.01100110011001100110100 * 2 ^ -1
    
0.7F规范化表示： 	1.01100110011001100110011 * 2 ^ -1    
    
所以2.0F-1.3F!=0.7F
    
计算2.0F-1.4F
2.0F-1.4F运算结果
    规范化表示：	1.00110011001100110011010 * 2 ^ -1
0.6F 规范化表示：	1.00110011001100110011010 * 2 ^ -1
    
2.0F-1.4F==0.7F
</code></pre>
<p><strong>浮点数计算，在存储和运算过程中都可能会有精度的丢失，故出现的结果和我们以为的结果就会有出入</strong></p>
<p>比如1.3 F ，由于二进制为无限循环小数，精度限制后值就变了</p>
<p>1.4 F ，值也变了，但舍入后相同，是巧合</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[第一章 计算机系统概述]]></title>
        <id>https://yahalou.github.io/post/di-yi-zhang-ji-suan-ji-xi-tong-gai-shu/</id>
        <link href="https://yahalou.github.io/post/di-yi-zhang-ji-suan-ji-xi-tong-gai-shu/">
        </link>
        <updated>2022-06-18T13:58:45.000Z</updated>
        <content type="html"><![CDATA[<h1 id="第一章-计算机系统概述">第一章 计算机系统概述</h1>
<h2 id="计算机的多级层次结构">计算机的多级层次结构</h2>
<img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206181601396.png" alt="2DAB8ACC8D90DE5CD5B0E8EF24B30B7A" style="zoom: 33%;" />
<h3 id="软硬件在逻辑上是等效的">软硬件在逻辑上是等效的</h3>
<p>任何可以用软件实现的操作也可以用硬件来实现</p>
<h3 id="编译器">编译器</h3>
<figure data-type="image" tabindex="1"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206181601232.png" alt="95CF069E0447AC65B27B822AFD46FC87" loading="lazy"></figure>
<p><strong>编译程序</strong>将高级语言程序<strong>文件</strong>翻译成机器语言程序<strong>文件</strong>后执行</p>
<p><strong>解释程序</strong>一句一句的翻译高级语言程序<strong>文件</strong>，翻译后立即执行，不生成机器语言程序<strong>文件</strong></p>
<h3 id="机器语言是唯一机器可以识别与执行的语言">机器语言是唯一机器可以识别与执行的语言</h3>
<h2 id="计算机的性能指标">计算机的性能指标</h2>
<h3 id="机器字长指令字长存储字长">机器字长，指令字长，存储字长</h3>
<blockquote>
<p>都是字长的整数倍</p>
</blockquote>
<h4 id="机器字长">机器字长</h4>
<figure data-type="image" tabindex="2"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/AD108F07A0414A597D677829DA73894D.png" alt="AD108F07A0414A597D677829DA73894D" loading="lazy"></figure>
<h4 id="指令字长">指令字长</h4>
<p>一个指令包含的二进制代码的位数</p>
<h4 id="存储字长">存储字长</h4>
<p>一个存储单元存储的二进制代码的位数，简称为字</p>
<h3 id="主存容量">主存容量</h3>
<h3 id="运算速度">运算速度</h3>
<blockquote>
<figure data-type="image" tabindex="3"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206181600268.png" alt="111FB39F3EEFDB21B1842D3C91015FCD" loading="lazy"></figure>
</blockquote>
<blockquote>
<p><strong>在计算过程中标注单位C(circle),I(instruct),S(second)</strong></p>
</blockquote>
<h4 id="主频-cs-cpu时钟周期">主频 c/s CPU时钟周期</h4>
<p>CPU最小的时间单位，执行指令的每个动作至少需要1个时钟周期</p>
<p>主频=速度，一秒多少个时钟周期</p>
<h4 id="cpi-ci">CPI <strong>c/i</strong></h4>
<p>执行一条指令所需的时钟周期数(clock cycle per instruction)</p>
<figure data-type="image" tabindex="4"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206181559433.png" alt="2" loading="lazy"></figure>
<h4 id="cpu执行时间-s">CPU执行时间 s</h4>
<p>运行一个程序所花费的时间</p>
<p>CPU执行时间=指令条数*CPI/主频</p>
<h4 id="mips-is">MIPS <strong>i/s</strong></h4>
<p>每秒执行多少百万条指令，million instruction <strong>per</strong> second</p>
<p>MIPS=指令条数/(执行时间*10^6)=主频/( CPI *10^6)</p>
<h4 id="浮点数">浮点数</h4>
<figure data-type="image" tabindex="5"><img src="https://myimagess.oss-cn-beijing.aliyuncs.com/202206181559605.png" alt="1" loading="lazy"></figure>
]]></content>
    </entry>
</feed>